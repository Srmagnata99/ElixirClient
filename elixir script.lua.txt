local CoreGui = game:GetService("CoreGui")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

local ranstart = os.clock()

local Lib = {}
Lib.connections = {}

local ClickInput = (Enum.UserInputType.MouseButton1)
local TouchInput = (Enum.UserInputType.Touch)

local services = setmetatable({}, {
	__index = function(_, k)
	k = (k == "InputService" and "UserInputService") or k
	return game:GetService(k)
	end
})

local client = services.Players.LocalPlayer

local Utility = {}

function Utility.connect(signal, callback)
local connection = signal:Connect(callback)
table.insert(Lib.connections, connection)

return connection
end

function Utility.disconnect(connection)
local index = table.find(Lib.connections, connection)
connection:Disconnect()

if index then
table.remove(Lib.connections, index)
end
end

local touchpoints = {}
local conducting = 0

local hasdragged = false
function Utility.dragify(import,object, dragoutline, stroke, multi)
local start, objectposition, dragging, currentpos

UserInputService.InputBegan:Connect(function(input)
	if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) then
	conducting = conducting + 1
	touchpoints[conducting] = input
	end
	if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and not hasdragged and dragoutline and dragoutline.Visible == true then
	dragoutline.Visible = false; hasdragged = true
	end
	end)

local dragtouch

import.InputBegan:Connect(function(input)
	if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) then
	dragging = true
	dragtouch = input
	start = input.Position
	if dragoutline then
	dragoutline.Visible = true
	end
	objectposition = object.Position
	end
	end)

Utility.connect(services.InputService.InputChanged, function(input)
	if (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) and dragging then
	local input = input
	if multi then
	input = dragtouch
	end
	currentpos = UDim2.new(objectposition.X.Scale, objectposition.X.Offset + (input.Position - start).X, objectposition.Y.Scale, objectposition.Y.Offset + (input.Position - start).Y)
	if dragoutline then


